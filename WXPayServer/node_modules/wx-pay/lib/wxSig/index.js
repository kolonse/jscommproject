/**
 * Created by kolonse on 2017/4/10.
 */
var crypto = require("crypto");
var queryString = require("querystring");
var md5 = require("md5");

function WXSig(opt) {
    this.signatureMethod = opt.signatureMethod ? opt.signatureMethod : "MD5";
    this.signatureFunc = opt.signatureFunc ? opt.signatureFunc : this._MD5;
}
/**
 * 默认加密算法
 * @param data
 * @constructor
 */
WXSig.prototype._MD5 = function(secret, data) {
    var str = data + "&key=" + secret;
    var res = this._MD5_(str);
    return res;
};

WXSig.prototype._MD5_ = function(data) {
    // return crypto.createHash("md5").update(data).digest("hex").toUpperCase();
    return md5(data).toUpperCase();
};

WXSig.prototype._Sort = function(data) {
    var ret = {};
    Object.keys(data).sort().forEach(function(key) {
        ret[key] = data[key];
    });
    return ret;
};

WXSig.prototype._stringify = function(data) {
    var str = "";
    for (var key in data) {
        str += key + "=" + data[key] + "&";
    }
    str = str.substr(0, str.length - 1);
    return str;
};

/**
 * 签名算法
 * @param data
 * @constructor
 */
WXSig.prototype.GenSig = function(data, secret) {
    // data.sign_type = this.signatureMethod;
    var str = this.signatureFunc(secret, this._stringify(this._Sort(data)));
    // data.sign_type = this.signatureMethod;
    return str;
};

WXSig.prototype.RawSig = function(data, secret) {
    var str = this.signatureFunc(secret, this._stringify(this._Sort(data)));
    // data.sign_type = this.signatureMethod;
    return str;
};

module.exports = function(opt) {
    return new WXSig(opt);
};